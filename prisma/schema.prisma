// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  Bookings    Booking[] // Relation to bookings
}

model Speaker {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String    @unique
  password        String
  expertise       String
  pricePerSession Float
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  timeSlots       TimeSlot[] // Relation to time slots
  Bookings        Booking[]  // Relation to bookings
}

model TimeSlot {
  id          Int       @id @default(autoincrement())
  speakerId   Int       // Relation to Speaker
  date        DateTime  // Date for the time slot
  timeSlot    String    // Example: "NINE_AM"
  available   Boolean   @default(true)
  Speaker     Speaker   @relation(fields: [speakerId], references: [id])
  Bookings    Booking[] // Relation to bookings
}

model Booking {
  id          Int       @id @default(autoincrement())
  userId      Int?      // Optional relation to User
  speakerId   Int       // Relation to Speaker
  timeSlotId  Int       // Relation to TimeSlot
  createdAt   DateTime  @default(now())
  status      String    // Add status field
  confirmationToken String? // Make it nullable if needed
  User        User?     @relation(fields: [userId], references: [id])
  Speaker     Speaker   @relation(fields: [speakerId], references: [id])
  TimeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id])
}


enum UserType {
  USER
  SPEAKER
}
